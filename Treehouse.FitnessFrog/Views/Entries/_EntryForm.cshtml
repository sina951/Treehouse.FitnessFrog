@*Remember adding the model directive @model, makes our view strongly typed and by doing it strongly typed
the entry model instance that is being passed in the controllers call to the view method, will now 
be available vai the views model property*@
@model Treehouse.FitnessFrog.Models.Entry
@using Treehouse.FitnessFrog.Models

@*Here we use MVC's Html.BeginForm() MVC-HTML helpermethod to render the form element, be sure to wrap it in a using statement*@
@using (Html.BeginForm())
{
    //using ValidationSummary method we can display the error messages inside the ModelState
    @Html.ValidationSummary("The following errors were found:", new { @class = "alert alert-danger" })

    <div class="row">

        <div class="col-md-6">
            @*Html.LabelFor() is a Label HTML helper methdod, it requires name of property to render
            class = "control-label" is our CSS class, we use the second label overload, which allowes us to pas an 
            anonymous object for the labels HTML attributes
            lamda m => m.Date is an anonymous method, m is a method parameter that is a reference to our views model property
            the => is the transition from the parameter list to the method body, m.Date, is the property on our model, taht we are returning
            from our anonymouse method, this appraoch makes it strongly typed way to specify the model property that we want to rende a label for*@
            <div class="form-group">
                @Html.LabelFor(m => m.Date, new { @class = "control-label" })
                @Html.TextBoxFor(m => m.Date, "{0:d}", new { @class = "form-control datepicker" })
            </div>

            <div class="form-group">
                @*ViewBag is a danymic object, so we have to explicitly cast the ViewBag property to its actual type of (SelectList)ViewBag*@
                @*The empty "" in (SelectList)ViewBag.ActivitiesSelectListItems, "", new { @class = "form-control" }) makes it so that the first item in the dropdownlist is empty*@
                @Html.LabelFor(m => m.ActivityId, new { @class = "control-label" })
                @Html.DropDownListFor(m => m.ActivityId,
                    (SelectList)ViewBag.ActivitiesSelectListItems, "", new { @class = "form-control" })
            </div>

            <div class="form-group">
                @Html.LabelFor(m => m.Duration, new { @class = "control-label" })
                @Html.TextBoxFor(m => m.Duration, new { @class = "form-control" })
            </div>

            <div class="form-group">
                @Html.LabelFor(m => m.Intensity, new { @class = "control-label" })
                <div>
                    <label class="radio-inline">
                        @Html.RadioButtonFor(m => m.Intensity,
                            Entry.IntensityLevel.Low) @Entry.IntensityLevel.Low
                        </label>
                        <label class="radio-inline">
                            @Html.RadioButtonFor(m => m.Intensity,
                                Entry.IntensityLevel.Medium) @Entry.IntensityLevel.Medium
                            </label>
                            <label class="radio-inline">
                                @Html.RadioButtonFor(m => m.Intensity,
                                    Entry.IntensityLevel.High) @Entry.IntensityLevel.High
                                </label>
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="checkbox">
                                @*The CheckBoxFor method just requires a lambda expression for the model property we are rendering a checkbox for*@
                                @*DisplayNameFor method will render the name for the provided property*@
                                @*Checkbox always needs an value of true or false so the server can render it. So MVC always sends a hidden value of true if no value is given or not.*@
                                <label>
                                    @Html.CheckBoxFor(m => m.Exclude) @Html.DisplayNameFor(m => m.Exclude)
                                </label>
                            </div>
                        </div>

                    </div>

                    <div class="col-md-6">

                        <div class="form-group">
                            @Html.LabelFor(m => m.Notes, new { @class = "control-label" })
                            @*14, 20 is for the row and collum values for the textbox area*@
                            @Html.TextAreaFor(m => m.Notes, 14, 20, new { @class = "form-control" })
                        </div>

                    </div>

                    <div class="col-md-12">
                        <div class="pad-top">
                            <button type="submit" class="btn btn-success btn-lg margin-right">
                                <span class="glyphicon glyphicon-save"></span> Save
                            </button>
                            <a href="@Url.Action("Index")" class="btn btn-warning btn-lg">
                                <span class="glyphicon glyphicon-remove"></span> Cancel
                            </a>
                        </div>
                    </div>

                </div>
            }
